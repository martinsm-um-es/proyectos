AWSTemplateFormatVersion: 2010-09-09
Description: Template to create an ECS cluster, task definition, and service with a load balancer, using the existing LabRole for tasks.

Parameters:
  LabRoleName:
    Type: String
    Description: Name of the existing IAM Role for EC2 instances
    Default: LabRole 

  LabInstanceProfileName:
    Type: String
    Description: Name of the EC2 Instance Profile
    Default: LabInstanceProfile

  EcrRepositoryUrl:
    Type: String
    Description: URL of the Docker image in ECR
    Default: "279733836385.dkr.ecr.us-east-1.amazonaws.com/proy-repo:flask_container"

  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Description: ID of the latest Amazon Linux 2023 AMI
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64

  ExistingClusterName:
    Type: String
    Description: Name of the existing ECS Cluster
    Default: proy-ecs-cluster

Resources:

  # Paso 22: Crear una definici√≥n de tarea
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: proy-task
      NetworkMode: awsvpc
      Cpu: '256' # 0.25 vCPU (256 CPU units)
      Memory: '512' # 0.5 GB (512 MB) -  Adjust based on your needs
      TaskRoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/${LabRoleName}  
      ContainerDefinitions:
        - Name: proy-container
          Image: !Ref EcrRepositoryUrl
          PortMappings:
            - ContainerPort: 5000
              Protocol: tcp
          Cpu: 102 # CPU estricta: 0.1
          Memory: 256 # Memoria estricta: 0.2
          MemoryReservation: 128 # Memoria flexible: 0.1

  # Paso 23: Crear el balanceador de carga
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: proy-flask-balanceador
      Subnets:
        - !ImportValue 'proy-infraestructura-PublicSubnet1Id'
        - !ImportValue 'proy-infraestructura-PublicSubnet2Id'
      SecurityGroups:
        - !ImportValue 'proy-infraestructura-ALBSecurityGroupId'
      Scheme: internet-facing
      Type: application

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !ImportValue 'proy-infraestructura-VpcId'
      Port: 5000
      Protocol: HTTP
      TargetType: ip
      HealthCheckIntervalSeconds: 30
      HealthyThresholdCount: 2
      HealthCheckPath: /health

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup

Outputs:
  LoadBalancerURL:
    Description: URL of the Application Load Balancer
    Value: !Sub "http://${ApplicationLoadBalancer.DNSName}"